name: CI and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DATABASE_USER_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DATABASE_NAME }}
          MYSQL_USER: ${{ secrets.DATABASE_USER }}
          MYSQL_PASSWORD: ${{ secrets.DATABASE_USER_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.9.0"

      - name: Install dependencies
        run: npm install

      - name: Install TypeScript
        run: npm install typescript --save-dev

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Grant privileges to User
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DATABASE_USER_PASSWORD }}
          MYSQL_USER: ${{ secrets.DATABASE_USER }}
        run: |
          CONTAINER_ID=$(docker ps --filter "ancestor=mysql:5.7" --format "{{.ID}}")
          docker exec $CONTAINER_ID mysql -u root -p${MYSQL_ROOT_PASSWORD} -e "GRANT ALL PRIVILEGES ON *.* TO '${MYSQL_USER}'@'%'; FLUSH PRIVILEGES;"

      - name: Run Prisma migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_USER_URL }}
        run: npx prisma migrate dev --name init

      - name: Prepare deployment package
        run: |
          mkdir deploy
          cp -r $(ls | grep -v deploy) deploy/
          zip -r deploy.zip deploy

      - name: Upload deployment package
        uses: actions/upload-artifact@v2
        with:
          name: deploy-package
          path: deploy.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v2
        with:
          name: deploy-package
          path: deploy

      - name: Set up SSH key
        run: echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
      - name: Copy files to EC2
        run: |
          chmod 600 ec2_key.pem
          scp -i ec2_key.pem -o StrictHostKeyChecking=no deploy/deploy.zip ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/deploy.zip

      - name: SSH into EC2 and deploy
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo apt-get update
            sudo apt-get install -y unzip
            sudo apt-get install -y nodejs
            sudo apt-get install -y npm
            sudo npm install -g pm2
            unzip -o deploy.zip -d deploy
            cd deploy/deploy
            npm install --production
            npm run build
            pm2 stop all || true
            pm2 start dist/server.js
          EOF
